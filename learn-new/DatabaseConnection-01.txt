Step 1 : create separate module for database connection and create a go file .
Step 2 : Implement two functions 1) DBinstance 2) OpenCollection

DBinstance :	(*mongo.Client)       

Step 1) store the database url in one variable 
Step 2) to check that , try print that variable after store url

MongoDb := "mongodb+srv://kishore:keepkishore@cluster0.vgu9tbs.mongodb.net/"
fmt.Print(MongoDb)

Step 3) then create client , err variable to connect db 
Step 4) use mongo.NewClient() --> The NewClient() function creates a new client object. The client object can be used to connect to a MongoDB database, execute queries, and perform other operations.
Step 5) then use option.Client() --> The options.Client() function creates a new options object. The options object can be used to configure the client, such as the connection string and the authentication mechanism.
Step 6) then use ApplyURI() --> The ApplyURI() function applies the URI to the options object. The URI is the connection string for the MongoDB database.

The err variable will be set to an error if the client could not be created.


client, err := mongo.NewClient(options.Client().ApplyURI("mongodb://localhost:27017"))
if err != nil {
    fmt.Println(err)
    return
}


Step 7) now create  ctx , cancle variable to set time for connection , also called setting deadkine for connecting db
Step 8) use context.WithTimeOut() , inside that func use context.Background() with 10*time.Second which gives 10 seconds for connect

ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second) line creates a new context with a timeout of 10 seconds. The context package provides a way to manage the lifetime of asynchronous operations. The WithTimeout() function creates a new context with a timeout. The context.Background() function returns a context that is never canceled.

The defer cancel() line defers the call to the cancel() function. This ensures that the context is canceled even if an error occurs.

The err = client.Connect(ctx) line attempts to connect the client to the database. The Connect() method connects the client to the database. The ctx parameter is the context that was created in the previous line.

The if err != nil { log.Fatal(err.Error()) } line checks if an error occurred during the connection attempt. If an error occurred, the log.Fatal() function prints the error message to the console and then terminates the program.

The fmt.Println("connected to MongoDB") line prints a message to the console indicating that the client has connected to the database.

The return client line returns the client object.

This code is a simple way to connect to a MongoDB database. It can be used as a starting point for building applications that interact with MongoDB databases.

Here are some of the things to keep in mind when using this code:

The 10*time.Second timeout is arbitrary. You may need to adjust it depending on your needs.
The log.Fatal() function terminates the program. You may want to use a different logging function if you want to continue running the program even if an error occurs.
The return client line returns the client object. You can use this object to execute queries and perform other operations on the database.

---> For using client anywhere in the program make it as global use variable declaration.

var Client *mongo.Client = DBinstance()

OpenCollection (*mongo.Colletion) 

Step 1) In this function your are going to create instance collection for database to perform tasks .
Step 2) for that you taking two input 1) which is client creates in previous DBistance func and 2) string which is used to create collection name 
Step 3) var collection *mongo.Collection = client.Database("restaurant").Collection(collectionName)


---> After create creating this call OpenCollection func from main using variable declaration and send two inputs which client and other one was any string for creating collection name.

var foodCollection *mongo.Collection = database.OpenCollection(database.Client, "food")





 